CRUD Quiz
Use the solution to this afternoon's Property Tracker lab to answer the following questions. Please write your answers under each question, push the file to GitHub, and submit in the usual way.

MVP Questions
In our Property Tracker application:
Q1. Where are we instantiating instances of the Property class?

  Within console.rb e.g. property1.save()

Q2. Where are we defining the SQL that enables us to save the ruby Property object into the database?

  Within def save in property.rb

Q3. In console.rb, which lines modify the database?

  Property.delete_all()
  property1.save()
  property2.save()
  property3.save()
  property1.delete()
  all_the_properties = Property.all()

Q4. Why do we not define the id of a Property object at the point we instantiate it (‘new it up’)?

  The id is provided automatically by the database

Q5. Where and how do we assign the id (that is generated by the database) to the ruby Property object?

  It is included in the initialize function at the top:

  def initialize(options)
    @id = options['id'].to_i if options['id']

Q6. Why do we put a guard (an if clause) on the @id attribute in the constructor?

  To ensure this always comes out as an integer

Q7. Why are some of the CRUD actions represented by instance methods, and others by class methods?

  Depending on the action required you may not want an instance's control to get the information from the database, which is where you can use a class method, e.g. returning all of the information in the database doesn't require an instance as we are returning all of them.

Q8. What type of data structure is returned by calls to db.exec_prepared()? In the save method, how do we access the id from the returned data structure?

  The data structures returned are an array of hashes.

  We access the id from the index position 0 and the string "id".

Q9. Why do we use prepared statements when performing database operations?

  In order to try to prevent an SQL injection attack.

Extension Questions
Look at the find_by_id and find_by_address methods in the Property class.

Q10. What do they take in as their arguments?

  find_by_id takes in the id of a specific property (e.g. (property2.id)) as an argument.

  find_by_address takes in the string of an address as an argument.

Q11. What are their return values?

  find_by_id - using hart_road = Property.find(property2.id) from console.rb returns:

  [2] pry(main)> hart_road
  => #<Property:0x007fcd07808898
  @address="15 Hart Road, NORTHFLEET,DA10 1ZX",
  @bedrooms=1,
  @build="flat",
  @id=14,
  @value=90000>

  find_by_address - using carriers_road = Property.find_by_address("57 Carriers Road, CROESERW, SA13 7GQ") from console.rb returns:

  [3] pry(main)> carriers_road
  => #<Property:0x007fcd05a257b8
  @address="57 Carriers Road, CROESERW, SA13 7GQ",
  @bedrooms=5,
  @build="semi-detached",
  @id=15,
  @value=400000>
